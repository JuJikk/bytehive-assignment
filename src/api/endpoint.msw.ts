/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Interview API
 * Documentation for interview endpoints
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  AuthResponseDto,
  GetApiProducts200Item,
  GetApiSalesRevenue200Item,
  TodaysStatsResponse,
  UserDto,
} from "./endpoint.schemas";

export const getGetUserProfileResponseMock = (
  overrideResponse: Partial<UserDto> = {},
): UserDto => ({
  avatar: faker.word.sample(),
  email: faker.word.sample(),
  id: faker.word.sample(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getPostApiAuthLoginResponseMock = (
  overrideResponse: Partial<AuthResponseDto> = {},
): AuthResponseDto => ({
  token: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetApiStatsTodaysStatsResponseMock = (
  overrideResponse: Partial<TodaysStatsResponse> = {},
): TodaysStatsResponse => ({
  cost: {
    label: faker.word.sample(),
    value: faker.number.int({ min: undefined, max: undefined }),
  },
  profit: {
    label: faker.word.sample(),
    value: faker.number.int({ min: undefined, max: undefined }),
  },
  sales: {
    label: faker.word.sample(),
    value: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getGetApiProductsResponseMock = (): GetApiProducts200Item[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    category: faker.word.sample(),
    id: faker.number.int({ min: undefined, max: undefined }),
    imageUrl: faker.word.sample(),
    leaderboardPosition: faker.number.int({ min: undefined, max: undefined }),
    purchasesQuantity: faker.number.int({ min: undefined, max: undefined }),
    title: faker.word.sample(),
  }));

export const getGetApiSalesRevenueResponseMock =
  (): GetApiSalesRevenue200Item[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      date: faker.date.past().toISOString().split("T")[0],
      id: faker.number.int({ min: undefined, max: undefined }),
      newCustomers: faker.number.int({ min: undefined, max: undefined }),
      upCrossSelling: faker.number.int({ min: undefined, max: undefined }),
    }));

export const getGetUserProfileMockHandler = (
  overrideResponse?:
    | UserDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserDto> | UserDto),
) => {
  return http.get("*/api/user", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserProfileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostApiAuthLoginMockHandler = (
  overrideResponse?:
    | AuthResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AuthResponseDto> | AuthResponseDto),
) => {
  return http.post("*/api/auth/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiAuthLoginResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetApiStatsTodaysStatsMockHandler = (
  overrideResponse?:
    | TodaysStatsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TodaysStatsResponse> | TodaysStatsResponse),
) => {
  return http.get("*/api/stats/todays-stats", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiStatsTodaysStatsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetApiProductsMockHandler = (
  overrideResponse?:
    | GetApiProducts200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetApiProducts200Item[]> | GetApiProducts200Item[]),
) => {
  return http.get("*/api/products", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiProductsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetApiSalesRevenueMockHandler = (
  overrideResponse?:
    | GetApiSalesRevenue200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetApiSalesRevenue200Item[]> | GetApiSalesRevenue200Item[]),
) => {
  return http.get("*/api/sales/revenue", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiSalesRevenueResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getInterviewAPIMock = () => [
  getGetUserProfileMockHandler(),
  getPostApiAuthLoginMockHandler(),
  getGetApiStatsTodaysStatsMockHandler(),
  getGetApiProductsMockHandler(),
  getGetApiSalesRevenueMockHandler(),
];
