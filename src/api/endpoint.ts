/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Customer Data API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { GetCustomers200Item } from "./endpoint.schemas";

/**
 * @summary Get customer data by month
 */
export const getCustomers = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCustomers200Item[]>> => {
  return axios.default.get(`/customers`, options);
};

export const getGetCustomersQueryKey = () => {
  return [`/customers`] as const;
};

export const getGetCustomersQueryOptions = <
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCustomersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomers>>> = ({
    signal,
  }) => getCustomers({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCustomers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCustomersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCustomers>>
>;
export type GetCustomersQueryError = AxiosError<unknown>;

export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomers>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomers>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get customer data by month
 */

export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCustomersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
